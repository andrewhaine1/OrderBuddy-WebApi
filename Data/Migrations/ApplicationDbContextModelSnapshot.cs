// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ord.WebApi.Data.Contexts;

namespace Ord.WebApi.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Ord.WebApi.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId", "Name")
                        .IsUnique();

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.MenuCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MenuId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MenuId", "Name")
                        .IsUnique();

                    b.ToTable("MenuCategories");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrdUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanPlaceOrders");

                    b.Property<string>("DeviceToken");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("MobileNumber");

                    b.Property<int>("OauthId");

                    b.HasKey("Id");

                    b.ToTable("OrdUsers");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrdUserHomeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ComplexName");

                    b.Property<string>("Country");

                    b.Property<string>("HouseNumber");

                    b.Property<int>("OrdUserId");

                    b.Property<string>("Province");

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.Property<string>("Suburb");

                    b.Property<string>("UnitNumber");

                    b.HasKey("Id");

                    b.HasIndex("OrdUserId");

                    b.ToTable("OrdUserHomeAddresses");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrdUserWorkAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuildingName");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country");

                    b.Property<string>("DepartmentName");

                    b.Property<string>("FloorNumber");

                    b.Property<string>("OfficeParkName");

                    b.Property<int>("OrdUserId");

                    b.Property<string>("Province");

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.Property<string>("Suburb");

                    b.HasKey("Id");

                    b.HasIndex("OrdUserId");

                    b.ToTable("OrdUserWorkAddresses");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrdUserId");

                    b.Property<int>("RestaurantId");

                    b.Property<string>("StoreOrderNumber");

                    b.HasKey("Id");

                    b.HasIndex("OrdUserId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeAccepted");

                    b.Property<DateTime>("DateTimeCancelled");

                    b.Property<DateTime>("DateTimeCompleted");

                    b.Property<DateTime>("DateTimePlaced");

                    b.Property<DateTime>("DateTimeReady");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("OrderId");

                    b.Property<int>("OrderStatus");

                    b.Property<decimal>("OrderTotal");

                    b.Property<int>("RestaurantCollectionTypeId");

                    b.Property<int>("RestaurantPaymentMethodId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("RestaurantCollectionTypeId");

                    b.HasIndex("RestaurantPaymentMethodId");

                    b.ToTable("OrderInfo");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemId");

                    b.Property<int>("OrderId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SubTotal");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ComplexName");

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsHalal");

                    b.Property<bool>("IsSuspended");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrdUserId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("Province");

                    b.Property<string>("RestaurantImagePath");

                    b.Property<int>("ServiceAreaId");

                    b.Property<string>("ShopNumber");

                    b.Property<string>("ShoppingCenterName");

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.Property<string>("Suburb");

                    b.HasKey("Id");

                    b.HasIndex("OrdUserId");

                    b.HasIndex("ServiceAreaId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.ServiceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Suburb");

                    b.HasKey("Id");

                    b.ToTable("ServiceAreas");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.CollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CollectionTypes");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.RestaurantCollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CollectionTypeId");

                    b.Property<int>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("CollectionTypeId");

                    b.HasIndex("RestaurantId", "CollectionTypeId")
                        .IsUnique();

                    b.ToTable("RestaurantCollectionTypes");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.RestaurantPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PaymentMethodId");

                    b.Property<int>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RestaurantId", "PaymentMethodId")
                        .IsUnique();

                    b.ToTable("RestaurantPaymentMethods");
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Menu", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.MenuCategory", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.Menu", "Menu")
                        .WithMany("MenuCategories")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.MenuItem", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.MenuCategory", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrdUserHomeAddress", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.OrdUser", "OrdUser")
                        .WithMany()
                        .HasForeignKey("OrdUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrdUserWorkAddress", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.OrdUser", "OrdUser")
                        .WithMany()
                        .HasForeignKey("OrdUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Order", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.OrdUser", "OrdUser")
                        .WithMany()
                        .HasForeignKey("OrdUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrderInfo", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.Order", "Order")
                        .WithOne("OrderInfo")
                        .HasForeignKey("Ord.WebApi.Entities.OrderInfo", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Shared.RestaurantCollectionType", "CollectionType")
                        .WithMany()
                        .HasForeignKey("RestaurantCollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Shared.RestaurantPaymentMethod", "RestaurantPaymentMethod")
                        .WithMany()
                        .HasForeignKey("RestaurantPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.OrderItem", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.MenuItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Restaurant", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.OrdUser", "OrdUser")
                        .WithMany()
                        .HasForeignKey("OrdUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.ServiceArea", "ServiceArea")
                        .WithMany()
                        .HasForeignKey("ServiceAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.RestaurantCollectionType", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.Shared.CollectionType", "CollectionType")
                        .WithMany()
                        .HasForeignKey("CollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Restaurant", "Restaurant")
                        .WithMany("CollectionTypes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ord.WebApi.Entities.Shared.RestaurantPaymentMethod", b =>
                {
                    b.HasOne("Ord.WebApi.Entities.Shared.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ord.WebApi.Entities.Restaurant", "Restaurant")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
